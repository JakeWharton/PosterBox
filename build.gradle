plugins {
	alias(libs.plugins.kotlin.multiplatform)
	alias(libs.plugins.kotlin.serialization)
	alias(libs.plugins.jetbrains.compose)

	// For implicit distribution configuration. See https://youtrack.jetbrains.com/issue/KT-50227.
	id 'application'
}

mainClassName = 'com.jakewharton.posterbox.Main'

kotlin {
	js("frontend") {
		browser()
		binaries.executable()
	}
	jvm("backend") {
		withJava() // For 'application' plugin. See https://youtrack.jetbrains.com/issue/KT-45038.
	}

	sourceSets {
		commonMain {
			dependencies {
				api(libs.kotlinx.serialization.core)
				implementation(libs.kotlinx.serialization.json)
			}
		}
		commonTest {
			dependencies {
				implementation(libs.kotlin.test)
			}
		}
		backendMain {
			dependencies {
				implementation(libs.kotlinx.coroutines.core)
				implementation(libs.kotlinx.serialization.core)
				implementation(libs.kotlinx.serialization.json)
				implementation(libs.ktor.server.core)
				implementation(libs.ktor.server.netty)
				implementation(libs.ktor.client.java)
				implementation(libs.ktoml)
				implementation(libs.clikt)
				implementation(libs.logback)
				// This is only so the compiler plugin (which is added to all targets) does not error.
				implementation(libs.jetbrains.compose.runtime)
			}
		}
		frontendMain {
			dependencies {
				implementation(libs.kotlinx.coroutines.core)
				implementation(libs.ktor.client.js)
				implementation(libs.jetbrains.compose.web.core)
			}
		}
	}
}

// Embed compiled JS and other frontend resources into the backend jar.
def backendJar = tasks.named('backendJar')
backendJar.configure {
	from(tasks.named("frontendBrowserDistribution")) {
		into('static')
	}
}

// Workaround for https://youtrack.jetbrains.com/issue/KT-37964.
distributions {
	main {
		contents {
			from(backendJar) {
				rename('.*', "${project.name}.jar")
				into('lib')
			}
		}
	}
}

// Disable unused distribution format.
tasks.named('distTar').configure {
	enabled = false
}

// The JS build targets the 'build/distributions/' directory so don't stomp on it.
// See also https://youtrack.jetbrains.com/issue/KT-42683.
tasks.named('distZip').configure {
	destinationDirectory.set(layout.buildDirectory.dir('dist'))
}

// Have the unzipped distribution available from 'assemble' for convenience.
tasks.named("assemble").configure { task ->
	task.dependsOn(tasks.getByName("installDist"))
}
